---
import type { Props } from "@astrojs/starlight/props";

const { labels } = Astro.props;

const sun = `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
  <path stroke-linecap="round" stroke-linejoin="round" d="M12 3v2.25m6.364.386-1.591 1.591M21 12h-2.25m-.386 6.364-1.591-1.591M12 18.75V21m-4.773-4.227-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0Z" />
</svg>
`;

const moon = `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
  <path stroke-linecap="round" stroke-linejoin="round" d="M21.752 15.002A9.72 9.72 0 0 1 18 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 0 0 3 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 0 0 9.002-5.998Z" />
</svg>
`;

const auto = `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
  <path stroke-linecap="round" stroke-linejoin="round" d="M9 17.25v1.007a3 3 0 0 1-.879 2.122L7.5 21h9l-.621-.621A3 3 0 0 1 15 18.257V17.25m6-12V15a2.25 2.25 0 0 1-2.25 2.25H5.25A2.25 2.25 0 0 1 3 15V5.25m18 0A2.25 2.25 0 0 0 18.75 3H5.25A2.25 2.25 0 0 0 3 5.25m18 0V12a2.25 2.25 0 0 1-2.25 2.25H5.25A2.25 2.25 0 0 1 3 12V5.25" />
</svg>
`;

const themes = [
    { value: "light", icon: sun },
    { value: "dark", icon: moon },
    { value: "auto", icon: auto },
];
---

<starlight-theme-select>
    <button aria-label={labels["themeSelect.accessibleLabel"]}>
        <span class="icon"></span>
    </button>
</starlight-theme-select>

<script is:inline>
    StarlightThemeProvider.updatePickers();
</script>

<script>
    type Theme = "auto" | "dark" | "light";

    const storageKey = "starlight-theme";
    const themes = ["light", "dark", "auto"];

    const parseTheme = (theme: unknown): Theme =>
        theme === "auto" || theme === "dark" || theme === "light"
            ? theme
            : "auto";

    const loadTheme = (): Theme =>
        parseTheme(
            typeof localStorage !== "undefined" &&
                localStorage.getItem(storageKey)
        );

    function storeTheme(theme: Theme): void {
        if (typeof localStorage !== "undefined") {
            localStorage.setItem(
                storageKey,
                theme === "light" || theme === "dark" ? theme : ""
            );
        }
    }

    const getPreferredColorScheme = (): Theme =>
        matchMedia("(prefers-color-scheme: light)").matches ? "light" : "dark";

    function onThemeChange(theme: Theme): void {
        //@ts-ignore
        StarlightThemeProvider.updatePickers(theme);
        document.documentElement.dataset.theme =
            theme === "auto" ? getPreferredColorScheme() : theme;
        storeTheme(theme);
        updateButtonIcon(theme);
    }

    function updateButtonIcon(theme: Theme): void {
        const button = document.querySelector("starlight-theme-select button");
        if (button) {
            const iconSpan = button.querySelector(".icon");
            if (iconSpan) {
                iconSpan.className = `icon ${theme}`;
            }
        }
    }

    matchMedia(`(prefers-color-scheme: light)`).addEventListener(
        "change",
        () => {
            if (loadTheme() === "auto") onThemeChange("auto");
        }
    );

    class StarlightThemeSelect extends HTMLElement {
        constructor() {
            super();
            const currentTheme = loadTheme();
            onThemeChange(currentTheme);

            const button = this.querySelector("button");
            if (button) {
                button.addEventListener("click", () => {
                    const currentIndex = themes.indexOf(loadTheme());
                    const nextIndex = (currentIndex + 1) % themes.length;
                    const nextTheme = themes[nextIndex] as Theme;
                    onThemeChange(nextTheme);
                });
            }
        }
    }
    customElements.define("starlight-theme-select", StarlightThemeSelect);
</script>

<style>
    button {
        background: none;
        border: none;
        cursor: pointer;
        padding: 0;
    }

    .icon {
        display: inline-block;
        width: 24px;
        height: 24px;
        background-size: contain;
        background-repeat: no-repeat;
    }

    .icon.light {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor' class='size-6'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M12 3v2.25m6.364.386-1.591 1.591M21 12h-2.25m-.386 6.364-1.591-1.591M12 18.75V21m-4.773-4.227-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0Z' /%3E%3C/svg%3E");
    }

    .icon.dark {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor' class='size-6'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M21.752 15.002A9.72 9.72 0 0 1 18 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 0 0 3 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 0 0 9.002-5.998Z' /%3E%3C/svg%3E");
    }

    .icon.auto {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor' class='size-6'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M9 17.25v1.007a3 3 0 0 1-.879 2.122L7.5 21h9l-.621-.621A3 3 0 0 1 15 18.257V17.25m6-12V15a2.25 2.25 0 0 1-2.25 2.25H5.25A2.25 2.25 0 0 1 3 15V5.25m18 0A2.25 2.25 0 0 0 18.75 3H5.25A2.25 2.25 0 0 0 3 5.25m18 0V12a2.25 2.25 0 0 1-2.25 2.25H5.25A2.25 2.25 0 0 1 3 12V5.25' /%3E%3C/svg%3E");
    }
</style>
